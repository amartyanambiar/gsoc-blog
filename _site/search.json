[
  {
    "objectID": "Sidebar/keywords.html",
    "href": "Sidebar/keywords.html",
    "title": "Keywords",
    "section": "",
    "text": "Amplicon\n\nDNA or RNA molecule that is amplified or copied through a laboratory technique called polymerase chain reaction (PCR) or ligase chain reaction (LCR).\nOutput of Amplification process.\nAmplification -&gt; Larger number of copies of a specific DNA sequence.\n\n\n\nBiome\n\nBiogeographical unit consisting of a biological community.\nOcean, Soil, etc.\n\n\n\nDNA\n\nDeoxyriboNucleic Acid.\nDouble-stranded molecule that contains the genetic code.\n\n\n\nENA\n\nEuropean Nucleotide Archive\nA global database of DNA and RNA sequences.\nData from ENA is used in MGnify.\n\n\n\nGenome\n\nComplete genetic material of an organism.\nMade up of DNA.\nExample : Human Genome consists of 3 billion nucleotides (23 pairs of chromosomes)\n\n\n\nMetagenome\n\nMetagenome is the genetic material recovered directly from environmental or clinical samples by a method called sequencing.\nMetagenomics is the study of the structure and function of these nucleotide sequences.\n\n\n\nMetagenome Assembled Genome (MAG)\n\nA metagenome assembled genome is a genome reconstructed from metagenomic data.\n1 partial or complete genome\n1 MAG = 1 species\n\n\n\nMGnify\n\nThe MGnify platform facilitates the assembly, analysis and archiving of microbiome-derived nucleicacid sequences.\nHub for the analysis and exploration of metagenomic, metatranscriptomic, amplicon and assembly data.\nEMBL’s European Bioinformatics Institute 🙌"
  },
  {
    "objectID": "Sidebar/commands.html",
    "href": "Sidebar/commands.html",
    "title": "Saviour Commands",
    "section": "",
    "text": "Get The Jupyter Lab Server Up and Running\n\n\n\n\n\n\nFor  pathways_vis  Branch\n\n\n\ndocker run -it -v $PWD/src/notebooks:/home/jovyan/mgnify-examples -p 8888:8888 \\\nquay.io/microbiome-informatics/emg-notebooks.dev:pathways_vis"
  },
  {
    "objectID": "posts/Viz_Recon/index.html#map-of-sample-locations",
    "href": "posts/Viz_Recon/index.html#map-of-sample-locations",
    "title": "MGnify Visualisation Recon",
    "section": "Map of sample locations",
    "text": "Map of sample locations\nExample URL: https://www.ebi.ac.uk/metagenomics/studies/MGYS00001606#overview\nWhat it shows: Location of the samples collected\nDataset: Sample metadata (from ENA)\nVisualisation type: Geographical Map\nTechnology used: Google Maps embed"
  },
  {
    "objectID": "posts/Viz_Recon/index.html#quality-control",
    "href": "posts/Viz_Recon/index.html#quality-control",
    "title": "MGnify Visualisation Recon",
    "section": "Quality Control",
    "text": "Quality Control\nExample URL: https://www.ebi.ac.uk/metagenomics/analyses/MGYA00584637#qc\nTechnology used: Highcharts\nDataset: Accessed through Analyses Accession ID - Summary\n\nNumber of Sequence Reads per QC step\nWhat it shows: Number of reads which pass the quality control steps in the pipeline.\nVisualisation type: Normal X-axis Charts\n\n\nRead Length & Read GC Distribution\nWhat it shows: Histograms showing distributions of sequence lengths and percentage GC content for the sequences having passed quality control.\nVisualisation type: Histogram\n\n\nNucleotide Position Histogram\nWhat it shows: Shows the relative abundance of nucleotides (A, C, G, T, or ambiguous base \"N\") at each position starting from the beginning of each read up to the first 500 base pairs.\nVisualisation type: Histogram\nDataset: Accessed through Analyses Accession ID - nucleotide-distribution"
  },
  {
    "objectID": "posts/Viz_Recon/index.html#taxonomic-analysis",
    "href": "posts/Viz_Recon/index.html#taxonomic-analysis",
    "title": "MGnify Visualisation Recon",
    "section": "Taxonomic analysis",
    "text": "Taxonomic analysis\nResults from the taxonomic analysis steps of the pipeline.\nExample URL: https://www.ebi.ac.uk/metagenomics/analyses/MGYA00584637#taxonomic\n\nKrona\nWhat it shows: Interactive Krona to visualise the taxa hierarchy\nTechnology used: https://github.com/marbl/Krona/wiki\nVisualisation type: Krona\nDataset: Accessed through Analyses Accession ID - krona${taxResults}\n\n\nDomain Composition\nTechnology used: Highcharts\nVisualisation type: Pie, Column\nDataset: Accessed through Analysis Accession ID - taxonomy\n\n\nPhylum Composition\nTechnology used: Highcharts\nVisualisation type: Pie, Column, Stacked Column\nDataset: Accessed through Analysis Accession ID - taxonomy"
  },
  {
    "objectID": "posts/Viz_Recon/index.html#functional-analysis",
    "href": "posts/Viz_Recon/index.html#functional-analysis",
    "title": "MGnify Visualisation Recon",
    "section": "Functional analysis",
    "text": "Functional analysis\nCharts present the functional analysis outputs of the pipeline, which focus on InterPro, Pfam, KEGG orthologue and GO term annotations. These summarise the functional content of the sequences in the sample.\nExample URL: https://www.ebi.ac.uk/metagenomics/analyses/MGYA00584637#functional\n\nInterPro\nWhat it shows: Shows Sequence feature summary & InterPro Summary\nTechnology used: Highcharts\nVisualisation type: X-axis Chart, Pie\n\n\nGO Terms\nWhat it shows: A summary of Gene Ontology (GO) terms derived from InterPro matches to the sample is provided in the charts below.\nTechnology used: Highcharts\nVisualisation type: Bar, Pie\n\n\nPfam\nWhat it shows: Top 10 Pfam entries\nTechnology used: Highcharts\nVisualisation type: Bar\n\n\nKO\nWhat it shows: Top 10 KO entries\nTechnology used: Highcharts\nVisualisation type: Bar"
  },
  {
    "objectID": "posts/Viz_Recon/index.html#contig-viewer",
    "href": "posts/Viz_Recon/index.html#contig-viewer",
    "title": "MGnify Visualisation Recon",
    "section": "Contig Viewer",
    "text": "Contig Viewer\nExample URL: https://www.ebi.ac.uk/metagenomics/analyses/MGYA00643204?selected_contig=ERZ12633542.2-NODE-96-length-2072-cov-5.941001#contigs-viewer\nWhat it shows: Contig browser for the assembly contigs\nDataset: through assembly ID, FASTA URL\nVisualisation type: Contig viewer\nTechnology used: IGV"
  },
  {
    "objectID": "posts/Viz_Recon/index.html#pathwayssystems",
    "href": "posts/Viz_Recon/index.html#pathwayssystems",
    "title": "MGnify Visualisation Recon",
    "section": "Pathways/Systems",
    "text": "Pathways/Systems\nResults from the biochemical pathways and systems predictions steps of the pipeline.\n\nKEGG Module\n\n\nGenome properties\n\n\nantiSMASH"
  },
  {
    "objectID": "posts/Viz_Recon/index.html#kegg-pathway-visualisation",
    "href": "posts/Viz_Recon/index.html#kegg-pathway-visualisation",
    "title": "MGnify Visualisation Recon",
    "section": "Kegg pathway visualisation",
    "text": "Kegg pathway visualisation\nExample URL: https://github.com/EBI-Metagenomics/notebooks/blob/pathways_vis/src/notebooks/R%20Examples/pathways_vis.ipynb (not yet live)\nWhat it shows: completeness of KEGG pathways for a sample\nDataset: combination of an MGYA Kegg Module list and a Pathway from KEGG API\nVisualisation type: pathway network\nTechnology used: pathviz R package"
  },
  {
    "objectID": "posts/Pathway_Viz/pathways_vis.html",
    "href": "posts/Pathway_Viz/pathways_vis.html",
    "title": "Introduction ",
    "section": "",
    "text": "---\ntitle: \"Pathway Visualisation\"\n---\n---\ntitle: \"Pathways Visualization\"\nauthor: \"Alejandra Escobar (MGnify team)\"\ncategories: [R]\nexecute: \n  enabled: false\n---\n# Loading libraries:\nlibrary(ALDEx2)\nlibrary(data.table)\nlibrary(dplyr)\nlibrary(IRdisplay)\nlibrary(KEGGREST)\nlibrary(MGnifyR)   \nlibrary(pathview)\nlibrary(tidyjson)\n# Setting up functions\ncollect_pathways &lt;- function(ids_list) {\n    pathways = list()\n    for (id in ids_list) { \n        current_pathway = as.list(keggLink(\"pathway\", id))\n        for (index in grep(\"map\", current_pathway)) {        \n            clean_id = gsub(\"*path:\", \"\", current_pathway[index])\n            # Discarding chemical structure (map010XX), global (map011XX), and overview (map012XX) maps\n            prefix = substring(clean_id, 1, 6)\n            if(is.na(match(\"map010\", prefix)) & is.na(match(\"map011\", prefix)) & is.na(match(\"map012\", prefix)) ){\n                pathways = append(pathways, clean_id)\n            }\n        }\n    }\n    return(pathways)\n}\n# Create your session mgnify_client object\nmg = mgnify_client(usecache = T, cache_dir = '/home/jovyan/.mgnify_cache')\nThe goal of this notebook is to demonstrate how to create KEGG pathway maps to visualize metabolic potential and metabolite production in metagenomic samples. We will use metabolic pathways annotated at the gene level by assigning a KEGG Orthology (KO) to putative protein sequences. These results are generated through the MGnify v5.0 pipeline for metagenomic assemblies, as shown in the workflow schema below. We will also use the completeness estimation of KEGG modules available in the MGnify web portal. Consider that modules completeness is determined by the number of essential steps present; therefore, even if 100% completeness is achieved, there can still be gaps.\nThe KEGG (Kyoto Encyclopedia of Genes and Genomes) database is a collection of biologically-oriented data, including genetic and metabolic pathways, diseases and drugs, protein-protein interactions, and gene expression. We use the KEGG database to make connections between genes and biological information and provides pathways as a resource for systems biology.\nKEGG Modules are clusters of related genes that are involved in a specific biological process or pathway. KEGG modules IDs starts with ‘M’ followed by 5 numbers. Pathways are sets of interconnected biochemical reactions that form a chain leading from an initial reactant to a final product. The IDs of manually drawn reference pathway starts with the word ‘map’ followed by 5 numbers. KEGG pathways provide a high-level overview of the major metabolic pathways in an organism, while KEGG modules provide a more detailed view of the genes and reactions involved in a specific pathway. For a better display of results, in this notebook we are not using as templates chemical structure (map010XX), global (map011XX), and overview (map012XX) maps.\nIn the following sections of this introduction you will find a couple of simplest minimal examples on the main functions we will use to fetch and format the input tables for KEGG pathways visualization."
  },
  {
    "objectID": "posts/Pathway_Viz/pathways_vis.html#part-1.-drawing-presenceabsence-kos-for-one-metagenomic-sample",
    "href": "posts/Pathway_Viz/pathways_vis.html#part-1.-drawing-presenceabsence-kos-for-one-metagenomic-sample",
    "title": "Introduction ",
    "section": "Part 1. Drawing presence/absence KOs for one metagenomic sample ",
    "text": "Part 1. Drawing presence/absence KOs for one metagenomic sample \nFor Parts 1 and 2 of this notebook, we will use MGnify results generated for two studies: 1. Metagenomes of bacteria colonizing the gut of Apis mellifera and Apis cerana from Japan (MGYS00006180). 2. Gut microbiota of Switzerland honeybees (MGYS00006178).\nThe original analysis based on viral communities can be found in the Bonilla-Rosso et al., publication.\n\n1.1. Fetching data from MGnify \n\nFetching the analysis accession list using the study accessions.\n\n\nall_accessions = mgnify_analyses_from_studies(mg, c('MGYS00006180','MGYS00006178'))\nall_metadata = mgnify_get_analyses_metadata(mg, all_accessions)\n\n  |======================================================================| 100%\n  |======================================================================| 100%\n\n\n\nKeeping just the first analysis accession to fetch the kegg orthologs count table from the MGnify API and transform from JSON to matrix.\n\n\naccession = head(all_accessions, 1)\nko_loc = paste0('analyses/',accession,'/kegg-orthologs')\n\n\nko_json = mgnify_retrieve_json(mg, path = ko_loc)\nko_data = as.data.frame(ko_json %&gt;% spread_all)[ , c(\"attributes.accession\", \"attributes.count\")]\nko_data = data.frame(ko_data, row.names=1)\ncolnames(ko_data)[1] = 'counts'\nko_matrix = data.matrix(ko_data)\n\n\nhead(ko_matrix, 3)\n\n\nA matrix: 3 × 1 of type dbl\n\n\n\ncounts\n\n\n\n\nK10822\n115\n\n\nK02030\n91\n\n\nK02004\n79\n\n\n\n\n\n\nFetch the modules completeness table and filter out completeness &lt; 100%.\n\n\ncomp_loc = paste0('analyses/',accession,'/kegg-modules')\nko_comp_json = mgnify_retrieve_json(mg, path = comp_loc)\nko_comp = as.data.frame(ko_comp_json %&gt;% spread_all)\nmodules = ko_comp[ko_comp$attributes.completeness == 100,][, c(\"attributes.accession\")]\n\n\nhead(modules)\n\n\n'M00001''M00002''M00003''M00004''M00005''M00006'\n\n\n\n\n1.2. Selecting the most complete pathways \n\nNow we need to collect the list of template pathways where these complete modules can be draw. This step takes less than 1 minute to run.\n\n\nmd_pathways = collect_pathways(modules)\n\n\nhead(md_pathways)\n\n\n    'map00010'\n    'map00010'\n    'map00010'\n    'map00020'\n    'map00030'\n    'map00030'\n\n\n\n\nIn order to draw the most complete pathways maps, we will use the list of templates we obtained in the previous step and select only pathways having all their constituent modules.\n\n\n# Counting the number of modules we have in each pathway\nour_pathways_counts = list()\nfor (path_element in md_pathways) {\n    if (path_element %in% names(our_pathways_counts)) {\n        new_value = our_pathways_counts[[path_element]] + 1\n        our_pathways_counts[path_element] = new_value       \n    } else {\n        our_pathways_counts[path_element] = 1 \n    }\n}\n\n# Counting the number of modules expected in each pathway\nu_pathways = unique(md_pathways)\nexp_pathways_counts = list()\nfor (path in u_pathways) {\n    mod_count = length(as.list(keggLink(\"module\", path)))\n    exp_pathways_counts[path] = mod_count \n}\n\n# Selecting the pathways having all their constituent modules. We remove the 'map' prefix as pathview doesn't like it\nto_draw = list()\nfor (pathway in names(our_pathways_counts)) {\n    our_value = our_pathways_counts[[pathway]]\n    exp_value = exp_pathways_counts[[pathway]]\n    ratio =  our_value / exp_value\n    if (ratio == 1) {\n        nude_id =  gsub(\"map\", \"\", pathway)\n        to_draw = append(to_draw, nude_id)   \n    }\n}\n\n\nto_draw\n\n\n    '00010'\n    '00480'\n    '00430'\n    '00521'\n\n\n\n\n\n1.3. Ready to draw! \n\nAs we are plotting absence/presence, we set the number of bins = 2, the scale in one direction, and use 1 as limit.\n\n\nfor (p in to_draw) {\n    pathview(gene.data = ko_matrix, \n             species = \"ko\", \n             pathway.id = p, \n             bins=c(2, 2), \n             both.dirs = FALSE, \n             limit = c(1,1), \n             mid = c(\"#ffffff\" , \"#ffffff\"), \n             high = c(\"#02b3ad\" , \"#02b3ad\")\n    )\n}\n\nNote: Only KEGG ortholog gene ID is supported, make sure it looks like \"K01488\"!\n\nNote: Mapping via KEGG gene ID (not Entrez) is supported for this species,\nit looks like \"K01488\"!\n\nInfo: Downloading xml files for ko00010, 1/1 pathways..\n\nInfo: Downloading png files for ko00010, 1/1 pathways..\n\nInfo: Working in directory /home/jovyan/mgnify-examples/R Examples\n\nInfo: Writing image file ko00010.pathview.png\n\nNote: Only KEGG ortholog gene ID is supported, make sure it looks like \"K01488\"!\n\nNote: Mapping via KEGG gene ID (not Entrez) is supported for this species,\nit looks like \"K01488\"!\n\nInfo: Downloading xml files for ko00480, 1/1 pathways..\n\nInfo: Downloading png files for ko00480, 1/1 pathways..\n\nInfo: Working in directory /home/jovyan/mgnify-examples/R Examples\n\nInfo: Writing image file ko00480.pathview.png\n\nNote: Only KEGG ortholog gene ID is supported, make sure it looks like \"K01488\"!\n\nNote: Mapping via KEGG gene ID (not Entrez) is supported for this species,\nit looks like \"K01488\"!\n\nInfo: Downloading xml files for ko00430, 1/1 pathways..\n\nInfo: Downloading png files for ko00430, 1/1 pathways..\n\nInfo: Working in directory /home/jovyan/mgnify-examples/R Examples\n\nInfo: Writing image file ko00430.pathview.png\n\nNote: Only KEGG ortholog gene ID is supported, make sure it looks like \"K01488\"!\n\nNote: Mapping via KEGG gene ID (not Entrez) is supported for this species,\nit looks like \"K01488\"!\n\nInfo: Downloading xml files for ko00521, 1/1 pathways..\n\nInfo: Downloading png files for ko00521, 1/1 pathways..\n\nInfo: Working in directory /home/jovyan/mgnify-examples/R Examples\n\nInfo: Writing image file ko00521.pathview.png\n\n\n\n\nCleaning the working directory.\n\n\nif(!dir.exists(\"output_plots\")){\n    dir.create(\"output_plots\")\n    dir.create(\"output_plots/single_sample\")\n}\n\nfile.copy(from=list.files(pattern=\"./*pathview.png\"), to=\"./output_plots/single_sample/\", overwrite = TRUE)\n\npng_files = list.files(path = \".\", pattern = \"*.png\")\nxml_files = list.files(path = \".\", pattern = \"*.xml\")\nfiles = c(png_files, xml_files)\nunlink(files)\n\n\nTRUETRUETRUETRUE\n\n\n\nThis is one example of Pathview outputs. The rest of the generated figures are stored at output_plots/single_sample/ directory. You can explore the files by clicking on them at the left-side panel."
  },
  {
    "objectID": "posts/Pathway_Viz/pathways_vis.html#part-2.-comparing-groups-of-samples-drawing-kos-abundance",
    "href": "posts/Pathway_Viz/pathways_vis.html#part-2.-comparing-groups-of-samples-drawing-kos-abundance",
    "title": "Introduction ",
    "section": "Part 2. Comparing groups of samples, drawing KOs abundance ",
    "text": "Part 2. Comparing groups of samples, drawing KOs abundance \nIn this part of the notebook we use the whole list of accessions for both studies (MGYS00006180 and MGYS00006178). After integrate the KO’s tables, we run Aldex2 to find differentially abudant KOs between honeybees from Japan and Switzerland, and we use the effect as scale to plot the pathways with the highest number of differentially abundant KOs. Consider that steps involving fetching KO tables and KEGGREST queries can take several minutes to run.\n\n2.1. Fetching KO tables from MGnify \n\nGenerating condition labels.\n\n\naccession_alias = subset(all_metadata, select = c('analysis_accession', 'study_attributes.accession'))\n\n\ncond_list = list()\nfor (study_id in accession_alias$'study_attributes.accession') {\n    if (study_id == 'MGYS00006180') {\n        cond_list = append(cond_list , 'Japan')\n    } else {\n        cond_list = append(cond_list , 'Switzerland')\n    }\n}\naccession_alias$condition = cond_list\n\n\ntable(unlist(accession_alias$condition))\n\n\n      Japan Switzerland \n         40          54 \n\n\n\nDownload and integrate KO counts tables. This step takes 8 minutes to complete.\n\n\nsamples_list = accession_alias$'analysis_accession'\nlist_of_dfs = list()\nfor (accession in samples_list) {\n    ko_loc = paste0('analyses/',accession,'/kegg-orthologs')\n    ko_json = mgnify_retrieve_json(mg, path = ko_loc)\n    ko_data = as.data.frame(ko_json %&gt;% spread_all)[ , c(\"attributes.accession\", \"attributes.count\")]\n    colnames(ko_data) = c('ko_id', accession)\n    list_of_dfs = append(list_of_dfs, list(ko_data)) \n}\n\n\nintegrated_df = data.frame()\nfor (df in list_of_dfs){\n    integrated_df = merge(integrated_df,df, all = T)\n}\n\n# Using the KO id column as row names\nrow.names(integrated_df) = integrated_df$ko_id\nintegrated_df$ko_id = NULL\n\n# Converting NA to zero \nintegrated_df[is.na(integrated_df)] = 0\n\n# Discarding samples that KOs abundance sum = 0\nintegrated_df = integrated_df %&gt;% select_if(is.numeric) %&gt;% select_if(~ sum(. != 0) &gt; 0)\n\n\nhead(integrated_df, c(3, 2))\n\n\nReformating the condition label according with the KOs dataframe.\n\n\nsorted_conds = list()\nfor (sample in colnames(integrated_df)) {\n    match = accession_alias[accession_alias$analysis_accession %in% sample,]$condition\n    cond = paste(match, collapse = \"\")\n    sorted_conds = append(sorted_conds, cond)    \n}\nvector_conds = unlist(sorted_conds)\n\n\ntable(vector_conds)\n\n\n\n2.1. Generating differentially abundance count tables\n\nThis step takes 2 minutes to run.\n\n\nx.all = aldex(integrated_df, \n              vector_conds, \n              mc.samples=128, \n              test=\"t\", \n              effect=TRUE, \n              include.sample.summary=FALSE, \n              denom=\"all\", \n              verbose=FALSE\n        )\n\n\nhead(x.all, 3)\n\n\nThe column effect in the above output (x.all table) contains the log ratio of the sample mean to the reference mean. A positive effect indicates that the sample mean is greater than the reference mean, while a negative effect indicates that the sample mean is lower than the reference mean. In this example, Japan group is used as reference. We are keeping in a separate matrix the list of KOs and the effect value to be used to plot.\n\n\nko_matrix = data.matrix(subset(x.all, select = c('effect')))\n\n\nhead(ko_matrix, 3)\n\n\nPlotting effect and difference (diff.btw) versus P-value. The threshold line indicates P-value = 0.05.\n\n\noptions(repr.plot.width=10, repr.plot.height=8)\n\npar(mfrow=c(1,2))\nplot(x.all$effect, x.all$we.ep, log=\"y\", cex=0.7, col=rgb(0,0,1,0.2),\n  pch=19, xlab=\"Effect size\", ylab=\"P value\", main=\"Effect size plot\")\npoints(x.all$effect, x.all$we.eBH, cex=0.7, col=rgb(1,0,0,0.2),\n  pch=19)\nabline(h=0.05, lty=2, col=\"grey\")\nlegend(15,1, legend=c(\"P value\", \"BH-adjusted\"), pch=19, col=c(\"blue\", \"red\"))\n\nplot(x.all$diff.btw, x.all$we.ep, log=\"y\", cex=0.7, col=rgb(0,0,1,0.2),\n  pch=19, xlab=\"Difference\", ylab=\"P value\", main=\"Volcano plot\")\npoints(x.all$diff.btw, x.all$we.eBH, cex=0.7, col=rgb(1,0,0,0.2),\n  pch=19)\nabline(h=0.05, lty=2, col=\"grey\")\n\n\nReporting features detected by the Welchs’ or Wilcoxon test individually (blue) or by both (red).\n\n\noptions(repr.plot.width=8, repr.plot.height=8)\n\nfound.by.all &lt;- which(x.all$we.eBH &lt; 0.05 & x.all$wi.eBH &lt; 0.05)\nfound.by.one &lt;- which(x.all$we.eBH &lt; 0.05 | x.all$wi.eBH &lt; 0.05)\n\nplot(x.all$diff.win, x.all$diff.btw, pch=19, cex=1, col=rgb(0,0,0,0.3),\n xlab=\"Dispersion\", ylab=\"Difference\")\npoints(x.all$diff.win[found.by.one], x.all$diff.btw[found.by.one], pch=19,\n cex=1, col=rgb(0,0,1,0.5))\npoints(x.all$diff.win[found.by.all], x.all$diff.btw[found.by.all], pch=19,\n cex=1, col=rgb(1,0,0,1))\nabline(0,1,lty=2)\nabline(0,-1,lty=2)\n\n\n\n2.3. Selecting the pathways templates to draw\n\nWe will use the union of both methods to find the pathways with differentially abundant KOs. This step takes 3 minutes to run.\n\n\nkos_list = list()\nfor (index in found.by.one){\n    current_ko = rownames(x.all)[index]\n    kos_list = append(kos_list, current_ko)\n}\n\n\nko_pathways = collect_pathways(kos_list)\n\n\nhead(ko_pathways)\n\n\nSelect the top 3 pathways with the highest number of significant KOs.\n\n\npathways_counts = list()\nfor (path_element in ko_pathways) {\n    if (path_element %in% names(pathways_counts)) {\n        new_value = pathways_counts[[path_element]] + 1\n        pathways_counts[path_element] = new_value       \n    } else {\n        pathways_counts[path_element] = 1 \n    }\n}\n\n\ntop_to_plot = names(tail(pathways_counts[order(unlist(pathways_counts))], 3))\ntop_to_plot\n\n\n\n2.4. Plotting pathways\n\nFor this type of data, values range from -1 to 1, with both negative and positive fractions. We use both directions when plotting.\n\n\nfor (p in top_to_plot) {\n    nude_id =  gsub(\"map\", \"\", p)\n    pathview(gene.data = ko_matrix, \n             species = \"ko\", \n             pathway.id = nude_id, \n             both.dirs = TRUE, \n             low = c(\"#bd066b\", \"#bd066b\"),  \n             mid = c(\"#c9c9c9\" , \"#c9c9c9\"), \n             high = c(\"#02b3ad\" , \"#02b3ad\")\n    )\n}\n\n\nCleaning the working directory.\n\n\nif(!dir.exists(\"output_plots/comparative\")){\n    dir.create(\"output_plots/comparative\")\n}\n\nfile.copy(from=list.files(pattern=\"./*pathview.png\"), to=\"./output_plots/comparative/\", overwrite = TRUE)\n\npng_files = list.files(path = \".\", pattern = \"*.png\")\nxml_files = list.files(path = \".\", pattern = \"*.xml\")\nfiles = c(png_files, xml_files)\nunlink(files)\n\n\nThis is one example of Pathview outputs. The rest of the generated figures are stored at output_plots/comparative/ directory. You can explore the files by clicking on them at the left-side panel."
  },
  {
    "objectID": "posts/Pathway_Viz/pathways_vis.html#part-3.-plotting-presenceabsence-of-kos-and-metabolites-for-one-metagenomic-sample",
    "href": "posts/Pathway_Viz/pathways_vis.html#part-3.-plotting-presenceabsence-of-kos-and-metabolites-for-one-metagenomic-sample",
    "title": "Introduction ",
    "section": "Part 3. Plotting presence/absence of KOs and metabolites for one metagenomic sample ",
    "text": "Part 3. Plotting presence/absence of KOs and metabolites for one metagenomic sample \nWe are using supplementary and processed tables from Franzosa et al.’s publication, available at The Curated Gut Microbiome Metabolome Data Resource. As normalizing metabolites data is not straightforward, this section will only use presence/absence data from one sample to demonstrate the creation of metabolic pathways maps using metabolites and KOs tables as input.\n\n3.1. Extracting KOs from input tables \n\nWe need a KOs list as input to draw pathways, so we are generating a KOs table from the enzyme (EC number) identifiers in the Supplementary Dataset 6: Per-subject microbial enzyme relative abundance profiles, as there are no KOs count tables available for this data.\n\n\nenzymes_data = read.table(\"/home/jovyan/supp_tables/enzymes.tsv\", header = TRUE, sep = \"\\t\") \n\n\nhead(enzymes_data, c(3,3))\n\n\nCleaning the enzyme IDs to get the EC number only and keeping data for only one sample (PRISM.7122)\n\n\nEC_ids = list()\ncomp_ids = list()\nfor ( enzyme_id in enzymes_data$Enzyme ){\n    new_id = gsub(\": .*\", \"\", enzyme_id)\n    EC_ids = append(EC_ids, new_id)\n}\n\n# Keeping data for PRISM.7122 sample\nenzymes_df = subset(enzymes_data, select = c('PRISM.7122'))\n\n# Using the clean EC number column  as row names\nrow.names(enzymes_df) = EC_ids\n\n# Discarding enzymes with abundance = 0\nenzymes_clean = subset(enzymes_df, enzymes_df[,1] &gt; 0)\n\nhead(enzymes_clean, 3)\n\n\nFinding the corresponding KOs for each EC number. As we want to plot presence/absence we can input Pathview with a list (formatted as vector) of KO ids instead of an abundance matrix. This step takes 4 minutes to complete.\n\n\nkos_presence = list()\nfor( ec_number in rownames(enzymes_clean) ){ \n    current_kos = as.list(names(as.list(keggFind(\"ko\", ec_number))))\n    kos_presence = append(kos_presence, current_kos) \n}\n\nkos_vector = unlist(gsub('ko:', '', kos_presence))\n\n\nhead(kos_vector)\n\n\n\n3.2. Loading and formatting metabolites data \n\nWe are using the metabolites table available at the The Curated Gut Microbiome Metabolome Data Resource github repo generated from the Supplementary Dataset 2: Per-subject metabolite relative abundance profiles of the original publication subsetted for sample PRISM.7122.\n\n\ncompound_data = read.table(\"/home/jovyan/supp_tables/mtb.tsv\", header = TRUE, row.names = 1, sep = \"\\t\") \n\n# Transposing the table\ncompound_data = data.frame(t(compound_data))\n\n# Keeping data for sample PRISM.7122 only\ncompound_df = subset(compound_data, select = c('PRISM.7122'))\n\n# Discarding rows with abundance = 0\ncompound_clean = subset(compound_df, compound_df[,1] &gt; 0)\n\n# Formatting row names to be mapped to compound names\nrow.names(compound_clean) = gsub(\"\\\\.\\\\..*\", \"\", row.names(compound_clean))\nrow.names(compound_clean) = gsub(\"\\\\.\", \"-\", row.names(compound_clean))\n\n\nhead(compound_clean, c(3,3))\n\n\nNow we have to transform the cluster IDs into KEGG compound IDs. This info is not available in the original publication. Fortunatelly, a mapping table exists available in The Curated Gut Microbiome Metabolome Data Resource github repo. Loading and formatting mapping data to transform cluster ID into KEGG compound ID.\n\n\nmapping_data = read.table(\"/home/jovyan/supp_tables/mtb.map.tsv\", header = TRUE, row.names = 1, sep = \"\\t\", quote = '#') \n\n\nhead(mapping_data, 3)\n\n\n# Reducing the table to keep only raw names and KEGG compund ID\ncompound_map = subset(mapping_data, select = c('KEGG'))\n\n# Removing rows with NA in the compound ID column\ncompound_map = na.omit(compound_map)\n\n# Formatting the row names to be correctly mapped on the abundance table 'compound_clean'\nrow.names(compound_map) = gsub(\": .*\", \"\", row.names(compound_map))\n\nhead(compound_map, 3)\n\n\nGenerating the compounds list (as vector) to plot as presence/absence.\n\n\ncpd_names = list()\nfor (name in rownames(compound_clean)) {\n    if (name %in% rownames(compound_map)) {\n        compound = compound_map[row.names(compound_map) == name, \"KEGG\"]\n        cpd_names = append(cpd_names, compound)   \n    }\n}\ncpd_vector = unlist(cpd_names)\n\n\nhead(cpd_vector)\n\n\nFinding pathways with annotated compounds. It takes 2 minutes to run.\n\n\ncpd_pathways = collect_pathways(cpd_names)\n\n\nhead(cpd_pathways)\n\n\nSelecting the top 3 pathways with the largest number of compounds to draw.\n\n\npathways_counts = list()\nfor (path_element in cpd_pathways) {\n    if (path_element %in% names(pathways_counts)) {\n        new_value = pathways_counts[[path_element]] + 1\n        pathways_counts[path_element] = new_value       \n    } else {\n        pathways_counts[path_element] = 1 \n    }\n}\n\ntop_to_plot = names(tail(pathways_counts[order(unlist(pathways_counts))], 3))\n\n\ntop_to_plot\n\n\n\n3.3. Drawing! \n\nAs we are plotting absence/presence, we set the number of bins = 2, the scale in one direction, and use 1 as limit.\n\n\nfor (p in top_to_plot) {\n    nude_id =  gsub(\"map\", \"\", p)\n    pathview(gene.data = kos_vector, \n             cpd.data = cpd_vector, \n             species = \"ko\", \n             pathway.id = nude_id, \n             bins=c(2, 2), \n             both.dirs = FALSE, \n             limit = c(1,1), \n             mid = c(\"#c9c9c9\" , \"#c9c9c9\"), \n             high = c(\"#02b3ad\" , \"#d67e03\")\n    )\n}\n\n\nCleaning working directory.\n\n\nif(!dir.exists(\"output_plots/metabolites\")){\n    dir.create(\"output_plots/metabolites\")\n}\n\nfile.copy(from=list.files(pattern=\"./*pathview.png\"), to=\"./output_plots/metabolites/\", overwrite = TRUE)\n\npng_files = list.files(path = \".\", pattern = \"*.png\")\nxml_files = list.files(path = \".\", pattern = \"*.xml\")\nfiles = c(png_files, xml_files)\nunlink(files)\n\n\nThis is one example of Pathview outputs. The rest of the generated figures are stored at output_plots/metabolites/ directory. You can explore the files by clicking on them at the left-side panel.\n\n\n\n\n\n?pathview\n\n### References: \n\nDatasets and databases papers:\nHoneybee datasets (used in parts 1 and 2 of this notebook): https://doi.org/10.1073/pnas.2000228117\nMetabolites dataset (used in part 3): https://doi.org/10.1038/s41564-018-0306-4\nThe Curated Gut Microbiome Metabolome Data Resource (used in part 3): https://doi.org/10.1038/s41522-022-00345-5\nMGnify pipeline: https://doi.org/10.1093/nar/gkac1080\nKEGG database: https://doi.org/10.1093/nar/gkw1092\n\n\nR libraries:\n\nlibrary(ALDEx2) Gloor GB, Macklaim JM, Fernandes AD (2016). Displaying Variation in Large Datasets: a Visual Summary of Effect Sizes. Journal of Computational and Graphical Statistics, 2016 http://doi.org/10.1080/10618600.2015.1131161. R package version 1.30.0.\nlibrary(data.table) Matt Dowle and Arun Srinivasan (2023). data.table: Extension of data.frame. R package version 1.14.8. https://CRAN.R-project.org/package=data.table\nlibrary(dplyr) Hadley Wickham, Romain François, Lionel Henry, Kirill Müller and Davis Vaughan (2023). dplyr: A Grammar of Data Manipulation. R package version 1.1.2. https://CRAN.R-project.org/package=dplyr\nlibrary(IRdisplay) Thomas Kluyver, Philipp Angerer and Jan Schulz (NA). IRdisplay: ‘Jupyter’ Display Machinery. R package version 1.1. https://github.com/IRkernel/IRdisplay\nlibrary(KEGGREST) Dan Tenenbaum and Bioconductor Package Maintainer (2021). KEGGREST: Client-side REST access to the Kyoto Encyclopedia of Genes and Genomes (KEGG). R package version 1.38.0.\nlibrary(MGnifyR) Ben Allen (2022). MGnifyR: R interface to EBI MGnify metagenomics resource. R package version 0.1.0.\nlibrary(pathview) Luo, W. and Brouwer C., Pathview: an R/Bioconductor package for pathway-based data integration and visualization. Bioinformatics, 2013, 29(14): 1830-1831, doi: 10.1093/bioinformatics/btt285. R package version 1.38.0.\nlibrary(tidyjson) Jeremy Stanley and Cole Arendt (2023). tidyjson: Tidy Complex ‘JSON’. R package version 0.3.2. https://CRAN.R-project.org/package=tidyjson\n\n\n\nGoing deeper:\nIf you want to learn more about using MGnifyR, you can follow the online tutorial available here: https://www.ebi.ac.uk/training/online/courses/metagenomics-bioinformatics/mgnifyr/\nKEGGREST documentation with multiple examples: https://www.bioconductor.org/packages/devel/bioc/vignettes/KEGGREST/inst/doc/KEGGREST-vignette.html\nPathview user manual: https://www.bioconductor.org/packages/release/bioc/vignettes/pathview/inst/doc/pathview.pdf"
  },
  {
    "objectID": "posts/Pathway_Viz/index.html",
    "href": "posts/Pathway_Viz/index.html",
    "title": "Pathway Visualisation",
    "section": "",
    "text": "Libraries Used\n\n\n\n\n\n\nImporting Libraries\n\n\n\nlibrary(ALDEx2)\nlibrary(data.table)\nlibrary(dplyr)\nlibrary(IRdisplay)\nlibrary(KEGGREST)\nlibrary(MGnifyR)   \nlibrary(pathview)\nlibrary(tidyjson)\n\nALDEx2 : Analyzing and comparing the abundance or occurrence of KEGG orthologs or modules within different samples or datasets.\ndata.table, dplyr : Used for data manipulation and transformation.\nKEGGREST : Allows accessing KEGG pathways.\nMGnifyR : It wraps the MGnify API in R functions.\npathview : Used for visualizing and analyzing pathway data with gene or protein expression data overlaid.\n\n\n\n\n\nCollecting Pathways using keggLink (KEGGREST Package)\n\n\n\n\n\n\nSetting up Function for Pathways Collection\n\n\n\ncollect_pathways &lt;- function(ids_list) {\n    pathways = list()\n    for (id in ids_list) { \n        current_pathway = as.list(keggLink(\"pathway\", id))\n        for (index in grep(\"map\", current_pathway)) {        \n            clean_id = gsub(\"*path:\", \"\", current_pathway[index])\n            # Discarding chemical structure (map010XX), global (map011XX), and overview (map012XX) maps\n            prefix = substring(clean_id, 1, 6)\n            if(is.na(match(\"map010\", prefix)) & is.na(match(\"map011\", prefix)) & is.na(match(\"map012\", prefix)) ){\n                pathways = append(pathways, clean_id)\n            }\n        }\n    }\n    return(pathways)\n}\n\nInput : List of Modules :: Output : List of Pathways\nkeggLink() is used to retrieve pathway info -&gt; “pathway”.\nUsing grep to get the pathway maps specifically.\nGetting rid of some pathwaysTODO\n\n\n\n\n\nMGnifyR Setup =&gt; Accession of Analyses\n\n\n\n\n\n\nSample Selection & Analyses Accession\n\n\n\nmg = mgnify_client(usecache = T, cache_dir = '/home/jovyan/.mgnify_cache')\nall_accessions = mgnify_analyses_from_studies(mg, c('MGYS00006180','MGYS00006178'))\nall_metadata = mgnify_get_analyses_metadata(mg, all_accessions)\n\nBoth the studies chosen by Alejandra Escobar are related to the gut bacteria of honeybees."
  },
  {
    "objectID": "The Project/me.html",
    "href": "The Project/me.html",
    "title": "Me",
    "section": "",
    "text": "Amartya Nambiar\n\nGSoC - 2023 Contributor\n\n\n\n\nSocial Links : https://amartya.vercel.app/"
  },
  {
    "objectID": "The Project/mentors.html",
    "href": "The Project/mentors.html",
    "title": "The Mentors",
    "section": "",
    "text": "EMBL-EBI is international, innovative and interdisciplinary, and a champion of open data in the life sciences.\nThey are part of the European Molecular Biology Laboratory (EMBL), an intergovernmental research organisation funded by over 20 member states, prospect and associate member states.\n\n\nMartin Beracochea\n\nMGnify Production Project Leader\n\n\n\n\nEBI Portfolio : https://www.ebi.ac.uk/people/person/martin-beracochea/\n\n\n\n\n\n\n\n\n\n\n\n\nSandy Rogers\n\nMGnify Website Full Stack Developer\n\n\n\n\nEBI Portfolio : https://www.ebi.ac.uk/people/person/martin-beracochea/"
  },
  {
    "objectID": "The Project/project.html",
    "href": "The Project/project.html",
    "title": "The Project",
    "section": "",
    "text": "Interactive Visualization for Comparative Metagenomics in MGnify\nThe project aims to improve the visualisation tools for metagenomics data in the MGnify platform by identifying and using new technologies that can be used both on the website and in Jupyter notebooks. The goal is to enable researchers to easily compare taxonomic information from multiple studies for better interpretation and analysis of metagenomics data. Additionally, the project aims to streamline the process of user community contribution to MGnify Notebooks for improved accessibility and user experience. The project will be approached in three phases: research and evaluation of visualisation technologies, development of a Jupyter/observable notebook for comparing and visualising data from two studies, and integration of a JupyterLab extension to streamline the contribution process. The deliverables include a report on suitable visualisation technologies, a fully-functional Jupyter/Observable Notebook, and an integrated extension for user contributions. As a stretch goal, a component for the MGnify website that allows users to select multiple studies and launch a notebook for cross-study analyses will be developed."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Amartya’s GSoC Journal",
    "section": "",
    "text": "Pathway Visualisation\n\n\n\n\n\n\n\nNotebook\n\n\n\n\n Exploring the Pathway Visualisation Notebook by Alejandra Escobar (EBI Bioinformatician)\n\n\n\n\n\n\nJun 15, 2023\n\n\nAmartya Nambiar\n\n\n\n\n\n\n  \n\n\n\n\nMGnify Visualisation Recon\n\n\n\n\n\n\n\n\n\n\nCondensed list of visualisations used in MGnify\n\n\n\n\n\n\nJun 12, 2023\n\n\nAmartya Nambiar\n\n\n\n\n\n\n  \n\n\n\n\nThe Project\n\n\n\n\n\n\n\nAbout\n\n\n\n\nThrilled to announce that I have been accepted as a GSoC Contributor for the year of 2023 at EBI (European Bioinformatics Institute). I am delighted to share the details of my project.\n\n\n\n\n\n\nMay 29, 2023\n\n\nAmartya Nambiar\n\n\n\n\n\n\nNo matching items"
  }
]