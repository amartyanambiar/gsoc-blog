{
  "hash": "1970a3d931c1012ff577cede0b2e77f6",
  "result": {
    "markdown": "---\ntitle: \"Pathways Visualization\"\nauthor: \"Alejandra Escobar (MGnify team)\"\ncategories: [R]\nexecute: \n  enabled: true\n---\n\n<div style=\"max-width:1200px\"><img src=\"../_resources/mgnify_banner.png\" width=\"100%\"></div>\n\n<img src=\"../_resources/mgnify_logo.png\" width=\"200px\">\n\n# Pathways Visualization\n\nIn this notebook we aim to demonstrate how the MGnifyR tool can be used to fetch functional annotation results generated through the MGnify metagenomic analyisis pipelines. Then we show how to generate the pathways visualization using [Pathview](https://bioconductor.org/packages/release/bioc/html/pathview.html) in R.\n\n[MGnifyR](http://github.com/beadyallen/mgnifyr) is a library that provides a set of tools for easily accessing and processing MGnify data in R, making queries to MGnify databases through the [MGnify API](https://www.ebi.ac.uk/metagenomics/api/v1/). \nThe benefit of MGnifyR is that data can either be fetched in tsv format or be directly combined in a phyloseq object to run an analysis in a custom workflow.\n\nThis is an interactive code notebook (a Jupyter Notebook). To run this code, click into each cell and press the ▶ button in the top toolbar, or press shift+enter\n\n## Contents\n\n- [Drawing presence/absence KOs for one metagenomic sample](#part1)\n    - [1.1. Fetching data from MGnify](#part1_1)\n    - [1.2. Selecting the most complete pathways](#part1_2)\n    - [1.3. Ready to draw!](#part1_3)\n- [Resources and Documentation](#part2)\n\n::: {.cell tags='[]' execution_count=1}\n``` {.r .cell-code}\n# Loading libraries:\nsuppressMessages({\n    library(ALDEx2)\n    library(data.table)\n    library(dplyr)\n    library(IRdisplay)\n    library(KEGGREST)\n    library(MGnifyR)   \n    library(pathview)\n    library(tidyjson)\n    library(IRdisplay)\n})\nsource(\"lib/variable_utils.r\")\nsource(\"lib/kegg_pathways_utils.r\")\n\ndisplay_markdown(file = '../_resources/mgnifyr_help.md')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning message:\n“package ‘MASS’ was built under R version 4.2.3”\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning message:\n“package ‘truncnorm’ was built under R version 4.2.3”\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning message:\n“package ‘dplyr’ was built under R version 4.2.3”\n```\n:::\n\n::: {.cell-output .cell-output-display}\n# Help with MGnifyR\n\nMGnifyR is an R package that provides a convenient way for R users to access data from [the MGnify API](https://www.ebi.ac.uk/metagenomics/api/).\n\nDetailed help for each function is available in R using the standard `?function_name` command (i.e. typing `?mgnify_query` will bring up built-in help for the mgnify_query command). \n\nA vignette is available containing a reasonably verbose overview of the main functionality. \nThis can be read either within R with the `vignette(\"MGnifyR\")` command, or [in the development repository](https://htmlpreview.github.io/?https://github.com/beadyallen/MGnifyR/blob/master/doc/MGnifyR.html)\n\n## MGnifyR Command cheat sheet\n\nThe following list of key functions should give a starting point for finding relevent documentation.\n\n- `mgnify_client()` : Create the client object required for all other functions.\n- `mgnify_query()` : Search the whole MGnify database.\n- `mgnify_analyses_from_xxx()` : Convert xxx accessions to analyses accessions. xxx is either samples or studies.\n- `mgnify_get_analyses_metadata()` : Retrieve all study, sample and analysis metadata for given analyses.\n- `mgnify_get_analyses_phyloseq()` : Convert abundance, taxonomic, and sample metadata into a single phyloseq object.\n- `mgnify_get_analyses_results()` : Get functional annotation results for a set of analyses.\n- `mgnify_download()` : Download raw results files from MGnify.\n- `mgnify_retrieve_json()` : Low level API access helper function.\n\n:::\n:::\n\n\n::: {.cell tags='[]' execution_count=2}\n``` {.r .cell-code}\n# Create your session mgnify_client object\nmg = mgnify_client(usecache = T, cache_dir = '/home/jovyan/.mgnify_cache')\n```\n:::\n\n\n::: {.cell tags='[]' execution_count=3}\n``` {.r .cell-code}\n# Setting tables and figures size to display (these will be reset later):\noptions(repr.matrix.max.cols=150, repr.matrix.max.rows=500)\noptions(repr.plot.width=4, repr.plot.height=4)\n```\n:::\n\n\n## Drawing presence/absence KOs for one metagenomic sample <a id='part1'/>\n\n### 1.1. Fetching data from MGnify & Pathways Selection <a id='part1_1'/>\n\n::: {.cell tags='[]' execution_count=4}\n``` {.r .cell-code}\nPATHWAY_STUDY_IDS <- get_variable_from_link_or_input('PATHWAY_STUDY_IDS', name =  'Study Accession', default = 'MGYS00006180,MGYS00006178')\nPATHWAY_STUDY_IDS <- c(strsplit(PATHWAY_STUDY_IDS, \",\")[[1]])\nprint(paste(\"Using\", PATHWAY_STUDY_IDS, \"as Study Accession\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUsing Study Accession = MGYS00006180,MGYS00006178 from the link you followed.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Using MGYS00006180 as Study Accession\"\n[2] \"Using MGYS00006178 as Study Accession\"\n```\n:::\n:::\n\n\n::: {.cell tags='[]' execution_count=5}\n``` {.r .cell-code}\n# Custom Pathways Selection\n\n# Most general pathways include\n# Glycolysis / Gluconeogenesis, Citrate cycle (TCA cycle), Pentose phosphate pathway, \n# Fatty acid biosynthesis, Pyrimidine metabolism, Oxidative phosphorylation\n\nCUSTOM_PATHWAY_IDS <- PathwaysSelection()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPathways Selection :\n - For the most general & most complete pathways, input 'G'\n - Press Enter to generate the most complete pathways\n - To add custom pathways, input pathway numbers (ex: 00053,01220)\n\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nUsing Pathways Accession = G from the link you followed.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nUsing 00010  -  Glycolysis / Gluconeogenesis  :  https://www.kegg.jp/pathway/map00010 as a Custom Pathway\nUsing 00020  -  Citrate cycle (TCA cycle)  :  https://www.kegg.jp/pathway/map00020 as a Custom Pathway\nUsing 00030  -  Pentose phosphate pathway  :  https://www.kegg.jp/pathway/map00030 as a Custom Pathway\nUsing 00061  -  Fatty acid biosynthesis  :  https://www.kegg.jp/pathway/map00061 as a Custom Pathway\nUsing 01232  -  Nucleotide metabolism  :  https://www.kegg.jp/pathway/map01232 as a Custom Pathway\nUsing 00240  -  Pyrimidine metabolism  :  https://www.kegg.jp/pathway/map00240 as a Custom Pathway\nUsing 00190  -  Oxidative phosphorylation  :  https://www.kegg.jp/pathway/map00190 as a Custom Pathway\n\n```\n:::\n:::\n\n\n1. Fetching the analysis accession list using the study accessions. \n\n::: {.cell tags='[]' execution_count=6}\n``` {.r .cell-code}\noutput <- capture.output({\n  all_accessions <- mgnify_analyses_from_studies(mg, PATHWAY_STUDY_IDS)\n  all_metadata <- mgnify_get_analyses_metadata(mg, all_accessions)\n})\n```\n:::\n\n\n2. Keeping just the first analysis accession to fetch the kegg orthologs count table from the MGnify API and transform from JSON to matrix.\n\n::: {.cell tags='[]' execution_count=7}\n``` {.r .cell-code}\naccession = head(all_accessions, 1)\nko_loc = paste0('analyses/',accession,'/kegg-orthologs')\n```\n:::\n\n\n::: {.cell tags='[]' execution_count=8}\n``` {.r .cell-code}\nko_json = mgnify_retrieve_json(mg, path = ko_loc)\nko_data = as.data.frame(ko_json %>% spread_all)[ , c(\"attributes.accession\", \"attributes.count\")]\nko_data = data.frame(ko_data, row.names=1)\ncolnames(ko_data)[1] = 'counts'\nko_matrix = data.matrix(ko_data)\nhead(ko_matrix, 3)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<table class=\"dataframe\">\n<caption>A matrix: 3 × 1 of type dbl</caption>\n<thead>\n\t<tr><th></th><th scope=col>counts</th></tr>\n</thead>\n<tbody>\n\t<tr><th scope=row>K10822</th><td>115</td></tr>\n\t<tr><th scope=row>K02030</th><td> 91</td></tr>\n\t<tr><th scope=row>K02004</th><td> 79</td></tr>\n</tbody>\n</table>\n```\n:::\n:::\n\n\n3. Fetch the modules completeness table and filter out completeness < 100%.\n\n::: {.cell tags='[]' execution_count=9}\n``` {.r .cell-code}\ncomp_loc = paste0('analyses/',accession,'/kegg-modules')\nko_comp_json = mgnify_retrieve_json(mg, path = comp_loc)\nko_comp = as.data.frame(ko_comp_json %>% spread_all)\nmodules = ko_comp[ko_comp$attributes.completeness == 100,][, c(\"attributes.accession\")]\nhead(modules)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNo encoding supplied: defaulting to UTF-8.\n\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<style>\n.list-inline {list-style: none; margin:0; padding: 0}\n.list-inline>li {display: inline-block}\n.list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n</style>\n<ol class=list-inline><li>'M00001'</li><li>'M00002'</li><li>'M00003'</li><li>'M00004'</li><li>'M00005'</li><li>'M00006'</li></ol>\n```\n:::\n:::\n\n\n---\n\n\n### 1.2. Selecting the most complete pathways <a id='part1_2'/>\n\n::: {.cell tags='[]' execution_count=10}\n``` {.r .cell-code}\n# Setting up function that collects KEGG pathways for a given list of IDs, excluding chemical structure & global maps\ncollect_pathways <- function(ids_list) {\n    pathways = list()\n    for (id in ids_list) { \n        current_pathway = as.list(keggLink(\"pathway\", id))\n        for (index in grep(\"map\", current_pathway)) {        \n            clean_id = gsub(\"*path:\", \"\", current_pathway[index])\n            # Discarding chemical structure (map010XX), global (map011XX), and overview (map012XX) maps\n            prefix = substring(clean_id, 1, 6)\n            if(is.na(match(\"map010\", prefix)) & is.na(match(\"map011\", prefix)) & is.na(match(\"map012\", prefix)) ){\n                pathways = append(pathways, clean_id)\n            }\n        }\n    }\n    return(pathways)\n}\n```\n:::\n\n\n1. Now we need to collect the list of template pathways where these complete modules can be draw. This step takes less than 1 minute to run.\n\n::: {.cell tags='[]' execution_count=11}\n``` {.r .cell-code}\nmd_pathways = collect_pathways(modules)\nhead(md_pathways)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<ol>\n\t<li>'map00010'</li>\n\t<li>'map00010'</li>\n\t<li>'map00010'</li>\n\t<li>'map00020'</li>\n\t<li>'map00030'</li>\n\t<li>'map00030'</li>\n</ol>\n```\n:::\n:::\n\n\n2. In order to draw the most complete pathways maps, we will use the list of templates we obtained in the previous step and select only pathways having all their constituent modules.\n\n::: {.cell tags='[]' execution_count=12}\n``` {.r .cell-code}\n# Counting the number of modules we have in each pathway\nour_pathways_counts = list()\nfor (path_element in md_pathways) {\n    if (path_element %in% names(our_pathways_counts)) {\n        new_value = our_pathways_counts[[path_element]] + 1\n        our_pathways_counts[path_element] = new_value       \n    } else {\n        our_pathways_counts[path_element] = 1 \n    }\n}\n\n# Counting the number of modules expected in each pathway\nu_pathways = unique(md_pathways)\nexp_pathways_counts = list()\nfor (path in u_pathways) {\n    mod_count = length(as.list(keggLink(\"module\", path)))\n    exp_pathways_counts[path] = mod_count \n}\n\n# Selecting the pathways having all their constituent modules. We remove the 'map' prefix as pathview doesn't like it\nto_draw = list()\nfor (pathway in names(our_pathways_counts)) {\n    our_value = our_pathways_counts[[pathway]]\n    exp_value = exp_pathways_counts[[pathway]]\n    ratio =  our_value / exp_value\n    if (ratio == 1) {\n        nude_id =  gsub(\"map\", \"\", pathway)\n        to_draw = append(to_draw, nude_id)   \n    }\n}\n\n\n# Adding the custom pathways to to_draw if not present already\nfor (pathway in CUSTOM_PATHWAY_IDS){\n    if (!(pathway %in% to_draw)) {\n    to_draw = append(to_draw, pathway)\n        }\n    }\n```\n:::\n\n\n::: {.cell tags='[]' execution_count=13}\n``` {.r .cell-code}\n# printing name of the pathways to be drawn\nfor (pathway in to_draw){\n    print(paste(pathway, \"-->\", get_pathway_info(pathway)[1],\" : \",get_pathway_info(pathway)[2], sep=\" \"))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"00010 --> Glycolysis / Gluconeogenesis  :  https://www.kegg.jp/pathway/map00010\"\n[1] \"00480 --> Glutathione metabolism  :  https://www.kegg.jp/pathway/map00480\"\n[1] \"00430 --> Taurine and hypotaurine metabolism  :  https://www.kegg.jp/pathway/map00430\"\n[1] \"00521 --> Streptomycin biosynthesis  :  https://www.kegg.jp/pathway/map00521\"\n[1] \"00020 --> Citrate cycle (TCA cycle)  :  https://www.kegg.jp/pathway/map00020\"\n[1] \"00030 --> Pentose phosphate pathway  :  https://www.kegg.jp/pathway/map00030\"\n[1] \"00061 --> Fatty acid biosynthesis  :  https://www.kegg.jp/pathway/map00061\"\n[1] \"01232 --> Nucleotide metabolism  :  https://www.kegg.jp/pathway/map01232\"\n[1] \"00240 --> Pyrimidine metabolism  :  https://www.kegg.jp/pathway/map00240\"\n[1] \"00190 --> Oxidative phosphorylation  :  https://www.kegg.jp/pathway/map00190\"\n```\n:::\n:::\n\n\n---\n\n### 1.3. Ready to draw! <a id='part1_3'/>\n\n1. As we are plotting absence/presence, we set the number of bins = 2, the scale in one direction, and use 1 as limit.\n\nTakes a couple of  minutes depending on the number of pathways \n\n::: {.cell tags='[]' execution_count=14}\n``` {.r .cell-code}\nsuppressMessages({\nfor (p in to_draw) {\n    pathview(gene.data = ko_matrix, \n             species = \"ko\", \n             pathway.id = p, \n             bins=c(2, 2), \n             both.dirs = FALSE, \n             limit = c(1,1), \n             mid = c(\"#ffffff\" , \"#ffffff\"), \n             high = c(\"#02b3ad\" , \"#02b3ad\")\n    )\n}\n})\n```\n:::\n\n\n2. Clearing the current working directory and Displaying all the generated figures that are stored at the `pathway_plots/` directory. \n\n::: {.cell tags='[]' execution_count=15}\n``` {.r .cell-code}\ngeneratePathwayPlots()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Glycolysis / Gluconeogenesis\"\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](PathwaysExplorer_files/figure-html/cell-16-output-2.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Citrate cycle (TCA cycle)\"\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](PathwaysExplorer_files/figure-html/cell-16-output-4.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Pentose phosphate pathway\"\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](PathwaysExplorer_files/figure-html/cell-16-output-6.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Fatty acid biosynthesis\"\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](PathwaysExplorer_files/figure-html/cell-16-output-8.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Oxidative phosphorylation\"\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](PathwaysExplorer_files/figure-html/cell-16-output-10.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Pyrimidine metabolism\"\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](PathwaysExplorer_files/figure-html/cell-16-output-12.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Taurine and hypotaurine metabolism\"\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](PathwaysExplorer_files/figure-html/cell-16-output-14.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Glutathione metabolism\"\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](PathwaysExplorer_files/figure-html/cell-16-output-16.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Streptomycin biosynthesis\"\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](PathwaysExplorer_files/figure-html/cell-16-output-18.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Nucleotide metabolism\"\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](PathwaysExplorer_files/figure-html/cell-16-output-20.png){}\n:::\n:::\n\n\n---\n\n## Resources and Documentation<a id='part2'/>\n#### **Pathview Documentation**: \n- The official documentation for Pathview, a tool for pathway-based data integration and visualization. It provides an overview of the tool and explains how to use it effectively. \n- You can find more information at [https://pathview.uncc.edu/overview#kegg_view](https://pathview.uncc.edu/overview#kegg_view) .\n\n\n#### **KEGGREST**\n- KEGGREST is a Bioconductor package that provides programmatic access to the KEGG database. \n- More about KEGGREST at [http://www.bioconductor.org/packages/release/bioc/vignettes/KEGGREST/inst/doc/KEGGREST-vignette.html](http://www.bioconductor.org/packages/release/bioc/vignettes/KEGGREST/inst/doc/KEGGREST-vignette.html)\n\n",
    "supporting": [
      "PathwaysExplorer_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}